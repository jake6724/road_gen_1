extends Node2D
class_name HighwayGenerator

@export var population_density: PopulationDensityGenerator
var marker: PackedScene = preload("res://scenes/Marker.tscn")

var map_height: int = 1000
var map_width: int = 1000
var noise_values: Array = []
var min_heap: MinHeap = MinHeap.new()

func _ready():
	find_population_centers()

## Find the top `num_population_centers` peaks of the noise layers generated by `population_density_generator`. 
## Return a sorted array containing pairs of (density_value:float, coordinates:Vector2)
func find_population_centers() -> Array:
	var num_population_centers: int = 10
	# Populate min heap
	for x in range(map_height):
		for y in range(map_width):
			var base_noise_value: float = population_density.base_noise.get_noise_2d(x,y)
			var detail_noise_value: float = population_density.detail_noise.get_noise_2d(x,y)
			var combined_noise_value: float = base_noise_value + detail_noise_value
			if min_heap.data.size() < num_population_centers:
				min_heap.push([combined_noise_value, Vector2(x,y)])
			else:
				if combined_noise_value > min_heap.peek()[0]:
					min_heap.pop()
					min_heap.push([combined_noise_value, Vector2(x,y)])

	# Normalize population center density values
	var min_density = min_heap.data.min()[0]
	var max_density = min_heap.data.max()[0]
	var normalization_min: float = .1 # Minimum range for the value normalization [min, 1]
	min_heap.data.sort()

	for pc in min_heap.data:
		var value: float = pc[0]
		var normalized_value: float = normalization_min + ((value - min_density) / (max_density - min_density) * (1 - normalization_min)) 
		var point: Vector2 = pc[1]

		# Add markers to world
		add_population_center_marker(point, normalized_value)
		
	return min_heap.data

func add_population_center_marker(point: Vector2, normalized_density_value: float) -> void:
	var scale_value: float = (normalized_density_value * .7) + 0.3
	var marker_scale: Vector2 = Vector2(scale_value, scale_value)
	var new_marker: Sprite2D = marker.instantiate()
	new_marker.position = point
	new_marker.scale = marker_scale
	add_child(new_marker)
